{"ast":null,"code":"var _jsxFileName = \"/Users/prasanjitsarkar/VS Code/Self/SCHOOL_VACCINATION_PORTAL/frontend/src/components/ManageStudents.js\",\n  _s = $RefreshSig$();\n/*\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nconst ManageStudents = () => {\n  const [students, setStudents] = useState([]);\n  const [newStudent, setNewStudent] = useState({\n    name: '',\n    class: '',\n    studentId: '',\n    vaccinationName: '',\n    vaccinationStatus: 'Not Vaccinated',\n    vaccinationDate: '',\n    bookingStatus: '',\n  });\n  const [editingIndex, setEditingIndex] = useState(null);\n  const [bookingIndex, setBookingIndex] = useState(null);\n  const [editData, setEditData] = useState({});\n  const [searchTerm, setSearchTerm] = useState('');\n  const [csvFile, setCsvFile] = useState(null);\n\n  const fetchStudents = async () => {\n    try {\n      const res = await axios.get('http://localhost:5000/students');\n      setStudents(res.data);\n    } catch (err) {\n      console.error('Error fetching students:', err);\n    }\n  };\n\n  useEffect(() => {\n    fetchStudents();\n  }, []);\n\n  const handleAddStudent = async () => {\n    const { name, class: studentClass, studentId } = newStudent;\n\n    if (!name || !studentClass || !studentId) {\n      alert('Please fill all fields!');\n      return;\n    }\n\n    const payload = { ...newStudent };\n    if (newStudent.vaccinationStatus === 'Not Vaccinated') {\n      payload.vaccinationDate = null;\n    }\n\n    try {\n      await axios.post('http://localhost:5000/students', payload);\n      setNewStudent({\n        name: '',\n        class: '',\n        studentId: '',\n      });\n      fetchStudents();\n    } catch (err) {\n      console.error('Error adding student:', err);\n    }\n  };\n\n  const handleEditClick = (index) => {\n    setEditingIndex(index);\n    setBookingIndex(null);\n    setEditData({ ...students[index] });\n  };\n\n  const handleBookClick = (index) => {\n    setBookingIndex(index);\n    setEditingIndex(null);\n    setEditData({ ...students[index] });\n  };\n\n  const handleSave = async () => {\n    const { id, bookingStatus, vaccinationStatus } = editData;\n\n    if (bookingStatus === 'Pending' || !bookingStatus || bookingStatus === 'Not Approved') {\n      const { name, class: studentClass, studentId } = editData;\n      if (!name || !studentClass || !studentId) {\n        alert('Please fill all fields!');\n        return;\n      }\n    }\n\n    if (bookingStatus === 'Approved' && vaccinationStatus !== 'Vaccinated') {\n      alert('You can only mark as Vaccinated.');\n      return;\n    }\n\n    try {\n      await axios.put(`http://localhost:5000/students/${id}`, editData);\n      setEditingIndex(null);\n      fetchStudents();\n    } catch (err) {\n      console.error('Error updating student:', err);\n    }\n  };\n\n  const handleMarkAsVaccinated = async () => {\n  try {\n    await axios.put(`http://localhost:5000/vaccinationStatus/${editData.id}`, {\n      ...editData,\n      vaccinationStatus: 'Vaccinated',\n    });\n    setEditingIndex(null);\n    fetchStudents(); // Refreshes updated data\n  } catch (err) {\n    console.error('Error marking vaccinated:', err);\n  }\n};\n\n  const handleVaccinationSave = async () => {\n    const { vaccinationName, vaccinationDate, id } = editData;\n\n    if (!vaccinationName || !vaccinationDate) {\n      alert('Please fill all vaccination fields!');\n      return;\n    }\n\n    try {\n      await axios.put(`http://localhost:5000/vaccination/${id}`, {\n        vaccinationName,\n        vaccinationDate,\n        vaccinationStatus: 'Not Vaccinated',\n        bookingStatus: 'Pending',\n      });\n\n      setBookingIndex(null);\n      fetchStudents();\n    } catch (err) {\n      console.error('Error saving vaccination info:', err);\n    }\n  };\n\n  const handleDelete = async (id) => {\n    try {\n      await axios.delete(`http://localhost:5000/students/${id}`);\n      fetchStudents();\n    } catch (err) {\n      console.error('Error deleting student:', err);\n    }\n  };\n\n  const handleCsvUpload = async () => {\n    if (!csvFile) {\n      alert('Please select a CSV file first!');\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('file', csvFile);\n\n    try {\n      await axios.post('http://localhost:5000/upload-csv', formData, {\n        headers: { 'Content-Type': 'multipart/form-data' },\n      });\n      alert('CSV uploaded successfully!');\n      setCsvFile(null);\n      fetchStudents();\n    } catch (err) {\n      console.error('CSV upload error:', err);\n      alert('Failed to upload CSV');\n    }\n  };\n\n  const filteredStudents = students.filter((student) => {\n    const term = searchTerm.toLowerCase();\n    return (\n      student.name?.toLowerCase().includes(term) ||\n      student.studentId?.toLowerCase().includes(term) ||\n      student.class?.toLowerCase().includes(term) ||\n      student.vaccinationName?.toLowerCase().includes(term) ||\n      student.vaccinationStatus?.toLowerCase().includes(term) ||\n      student.bookingStatus?.toLowerCase().includes(term)\n    );\n  });\n\n  return (\n    <div className=\"p-8 max-w-6xl mx-auto\">\n      <h1 className=\"text-3xl font-bold mb-6\">Manage Students</h1>\n\n     \n      <div className=\"mb-8 border p-4 rounded shadow\">\n        <h2 className=\"text-xl font-semibold mb-4\">Add New Student</h2>\n        <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n          <input placeholder=\"Name\" value={newStudent.name} onChange={(e) => setNewStudent({ ...newStudent, name: e.target.value })} className=\"border p-2 rounded\" />\n          <input placeholder=\"Class\" value={newStudent.class} onChange={(e) => setNewStudent({ ...newStudent, class: e.target.value })} className=\"border p-2 rounded\" />\n          <input placeholder=\"Student ID\" value={newStudent.studentId} onChange={(e) => setNewStudent({ ...newStudent, studentId: e.target.value })} className=\"border p-2 rounded\" />\n        </div>\n        <button onClick={handleAddStudent} className=\"btn btn-primary mt-4\">Add Student</button>\n      </div>\n\n   \n      <div className=\"mb-8 border p-4 rounded shadow\">\n        <h2 className=\"text-xl font-semibold mb-4\">Bulk Upload via CSV</h2>\n        <input type=\"file\" accept=\".csv\" onChange={(e) => setCsvFile(e.target.files[0])} className=\"mb-2\" />\n        <button onClick={handleCsvUpload} className=\"btn btn-secondary\" disabled={!csvFile}>Upload CSV</button>\n      </div>\n\n     \n      <input placeholder=\"Search...\" value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className=\"border p-2 rounded w-full mb-4\" />\n\n   \n      <table className=\"w-full border-collapse border\">\n        <thead>\n          <tr className=\"bg-gray-100\">\n            <th className=\"border p-2\">Name</th>\n            <th className=\"border p-2\">Class</th>\n            <th className=\"border p-2\">Student ID</th>\n            <th className=\"border p-2\">Booking Status</th>\n            <th className=\"border p-2\">Vaccination</th>\n            <th className=\"border p-2\">Date</th>\n            <th className=\"border p-2\">Status</th>\n            <th className=\"border p-2\">Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {filteredStudents.map((student, index) => {\n            const isEditing = editingIndex === index;\n            const isBooking = bookingIndex === index;\n\n            return (\n              <tr key={student.id}>\n                {isEditing ? (\n                  <>\n                    <td className=\"border p-2\">\n                      {(editData.bookingStatus === 'Pending' || !editData.bookingStatus || editData.bookingStatus === 'Not Approved') ? (\n                        <input value={editData.name} onChange={(e) => setEditData({ ...editData, name: e.target.value })} className=\"border p-1 rounded w-full\" />\n                      ) : (\n                        editData.name\n                      )}\n                    </td>\n                    <td className=\"border p-2\">\n                      {(editData.bookingStatus === 'Pending' || !editData.bookingStatus || editData.bookingStatus === 'Not Approved') ? (\n                        <input value={editData.class} onChange={(e) => setEditData({ ...editData, class: e.target.value })} className=\"border p-1 rounded w-full\" />\n                      ) : (\n                        editData.class\n                      )}\n                    </td>\n                    <td className=\"border p-2\">\n                      {(editData.bookingStatus === 'Pending' || !editData.bookingStatus || editData.bookingStatus === 'Not Approved') ? (\n                        <input value={editData.studentId} onChange={(e) => setEditData({ ...editData, studentId: e.target.value })} className=\"border p-1 rounded w-full\" />\n                      ) : (\n                        editData.studentId\n                      )}\n                    </td>\n                    <td className=\"border p-2\">{editData.bookingStatus}</td>\n                    <td className=\"border p-2\">{editData.vaccinationName}</td>\n                    <td className=\"border p-2\">{editData.vaccinationDate ? new Date(editData.vaccinationDate).toLocaleDateString() : 'â€”'}</td>\n                    <td className=\"border p-2\">\n                      {editData.bookingStatus === 'Approved' && editData.vaccinationStatus !== 'Vaccinated' ? (\n                        <button onClick={handleMarkAsVaccinated} className=\"bg-blue-600 text-white px-2 py-1 rounded\">Mark as Vaccinated</button>\n                      ) : (\n                        editData.vaccinationStatus\n                      )}\n                    </td>\n                    <td className=\"border p-2 space-x-2\">\n                      <button onClick={handleSave} className=\"bg-green-600 text-white px-2 py-1 rounded\">Save</button>\n                      <button onClick={() => setEditingIndex(null)} className=\"bg-gray-500 text-white px-2 py-1 rounded\">Cancel</button>\n                    </td>\n                  </>\n                ) : isBooking ? (\n                  <>\n                    <td className=\"border p-2\">{student.name}</td>\n                    <td className=\"border p-2\">{student.class}</td>\n                    <td className=\"border p-2\">{student.studentId}</td>\n                    <td className=\"border p-2\">{student.bookingStatus}</td>\n                    <td className=\"border p-2\">\n                      <input value={editData.vaccinationName || ''} onChange={(e) => setEditData({ ...editData, vaccinationName: e.target.value })} className=\"border p-1 rounded w-full\" />\n                    </td>\n                    <td className=\"border p-2\">\n                      <input type=\"date\" value={editData.vaccinationDate || ''} onChange={(e) => setEditData({ ...editData, vaccinationDate: e.target.value })} className=\"border p-1 rounded w-full\" />\n                    </td>\n                    <td className=\"border p-2\">{editData.vaccinationStatus || 'Not Vaccinated'}</td>\n                    <td className=\"border p-2 space-x-2\">\n                      <button onClick={handleVaccinationSave} className=\"bg-blue-600 text-white px-2 py-1 rounded\">Save</button>\n                      <button onClick={() => setBookingIndex(null)} className=\"bg-gray-500 text-white px-2 py-1 rounded\">Cancel</button>\n                    </td>\n                  </>\n                ) : (\n                  <>\n                    <td className=\"border p-2\">{student.name}</td>\n                    <td className=\"border p-2\">{student.class}</td>\n                    <td className=\"border p-2\">{student.studentId}</td>\n                    <td className=\"border p-2\">{student.bookingStatus}</td>\n                    <td className=\"border p-2\">{student.vaccinationName}</td>\n                    <td className=\"border p-2\">{student.vaccinationDate ? new Date(student.vaccinationDate).toLocaleDateString() : 'â€”'}</td>\n                    <td className=\"border p-2\">{student.vaccinationStatus}</td>\n                    <td className=\"border p-2 space-x-2\">\n                      <button\n                        onClick={() => handleEditClick(index)}\n                        className=\"btn btn-sm btn-warning\"\n                        disabled={student.bookingStatus === 'Approved' && student.vaccinationStatus === 'Vaccinated'}\n                      >\n                        Edit\n                      </button>\n                      <button onClick={() => handleDelete(student.id)} className=\"btn btn-sm btn-danger\">Delete</button>\n                      <button\n                        onClick={() => handleBookClick(index)}\n                        className=\"btn btn-sm btn-success\"\n                        disabled={student.bookingStatus === 'Approved' || student.bookingStatus === 'Pending'}\n                      >\n                        Book Drive\n                      </button>\n                    </td>\n                  </>\n                )}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default ManageStudents;\n\n\n*/\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport StudentForm from './StudentForm';\nimport CsvUploader from './CsvUploader';\nimport SearchBar from './SearchBar';\nimport StudentTable from './StudentTable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ManageStudents = () => {\n  _s();\n  const [students, setStudents] = useState([]);\n  const [newStudent, setNewStudent] = useState({\n    name: '',\n    class: '',\n    studentId: '',\n    vaccinationName: '',\n    vaccinationStatus: 'Not Vaccinated',\n    vaccinationDate: '',\n    bookingStatus: ''\n  });\n  const [editingIndex, setEditingIndex] = useState(null);\n  const [bookingIndex, setBookingIndex] = useState(null);\n  const [editData, setEditData] = useState({});\n  const [searchTerm, setSearchTerm] = useState('');\n  const [csvFile, setCsvFile] = useState(null);\n  const fetchStudents = async () => {\n    try {\n      const res = await axios.get('http://localhost:5000/students');\n      setStudents(res.data);\n    } catch (err) {\n      console.error('Error fetching students:', err);\n    }\n  };\n  useEffect(() => {\n    fetchStudents();\n  }, []);\n  const handleAddStudent = async () => {\n    const {\n      name,\n      class: studentClass,\n      studentId\n    } = newStudent;\n    if (!name || !studentClass || !studentId) {\n      alert('Please fill all fields!');\n      return;\n    }\n    const payload = {\n      ...newStudent\n    };\n    if (newStudent.vaccinationStatus === 'Not Vaccinated') {\n      payload.vaccinationDate = null;\n    }\n    try {\n      await axios.post('http://localhost:5000/students', payload);\n      setNewStudent({\n        name: '',\n        class: '',\n        studentId: ''\n      });\n      fetchStudents();\n    } catch (err) {\n      console.error('Error adding student:', err);\n    }\n  };\n  const handleEditClick = index => {\n    setEditingIndex(index);\n    setBookingIndex(null);\n    setEditData({\n      ...students[index]\n    });\n  };\n  const handleBookClick = index => {\n    setBookingIndex(index);\n    setEditingIndex(null);\n    setEditData({\n      ...students[index]\n    });\n  };\n  const handleSave = async () => {\n    const {\n      id,\n      bookingStatus,\n      vaccinationStatus\n    } = editData;\n    if (bookingStatus === 'Pending' || !bookingStatus || bookingStatus === 'Not Approved') {\n      const {\n        name,\n        class: studentClass,\n        studentId\n      } = editData;\n      if (!name || !studentClass || !studentId) {\n        alert('Please fill all fields!');\n        return;\n      }\n    }\n    if (bookingStatus === 'Approved' && vaccinationStatus !== 'Vaccinated') {\n      alert('You can only mark as Vaccinated.');\n      return;\n    }\n    try {\n      await axios.put(`http://localhost:5000/students/${id}`, editData);\n      setEditingIndex(null);\n      fetchStudents();\n    } catch (err) {\n      console.error('Error updating student:', err);\n    }\n  };\n  const handleMarkAsVaccinated = async () => {\n    try {\n      await axios.put(`http://localhost:5000/vaccinationStatus/${editData.id}`, {\n        ...editData,\n        vaccinationStatus: 'Vaccinated'\n      });\n      setEditingIndex(null);\n      fetchStudents();\n    } catch (err) {\n      console.error('Error marking vaccinated:', err);\n    }\n  };\n  const handleVaccinationSave = async () => {\n    const {\n      vaccinationName,\n      vaccinationDate,\n      id\n    } = editData;\n    if (!vaccinationName || !vaccinationDate) {\n      alert('Please fill all vaccination fields!');\n      return;\n    }\n    try {\n      await axios.put(`http://localhost:5000/vaccination/${id}`, {\n        vaccinationName,\n        vaccinationDate,\n        vaccinationStatus: 'Not Vaccinated',\n        bookingStatus: 'Pending'\n      });\n      setBookingIndex(null);\n      fetchStudents();\n    } catch (err) {\n      console.error('Error saving vaccination info:', err);\n    }\n  };\n  const handleDelete = async id => {\n    try {\n      await axios.delete(`http://localhost:5000/students/${id}`);\n      fetchStudents();\n    } catch (err) {\n      console.error('Error deleting student:', err);\n    }\n  };\n  const handleCsvUpload = async () => {\n    if (!csvFile) {\n      alert('Please select a CSV file first!');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('file', csvFile);\n    try {\n      await axios.post('http://localhost:5000/upload-csv', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      alert('CSV uploaded successfully!');\n      setCsvFile(null);\n      fetchStudents();\n    } catch (err) {\n      console.error('CSV upload error:', err);\n      alert('Failed to upload CSV');\n    }\n  };\n  const filteredStudents = students.filter(student => {\n    var _student$name, _student$studentId, _student$class, _student$vaccinationN, _student$vaccinationS, _student$bookingStatu;\n    const term = searchTerm.toLowerCase();\n    return ((_student$name = student.name) === null || _student$name === void 0 ? void 0 : _student$name.toLowerCase().includes(term)) || ((_student$studentId = student.studentId) === null || _student$studentId === void 0 ? void 0 : _student$studentId.toLowerCase().includes(term)) || ((_student$class = student.class) === null || _student$class === void 0 ? void 0 : _student$class.toLowerCase().includes(term)) || ((_student$vaccinationN = student.vaccinationName) === null || _student$vaccinationN === void 0 ? void 0 : _student$vaccinationN.toLowerCase().includes(term)) || ((_student$vaccinationS = student.vaccinationStatus) === null || _student$vaccinationS === void 0 ? void 0 : _student$vaccinationS.toLowerCase().includes(term)) || ((_student$bookingStatu = student.bookingStatus) === null || _student$bookingStatu === void 0 ? void 0 : _student$bookingStatu.toLowerCase().includes(term));\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-8 max-w-6xl mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-3xl font-bold mb-6\",\n      children: \"Manage Students\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StudentForm, {\n      newStudent: newStudent,\n      setNewStudent: setNewStudent,\n      handleAddStudent: handleAddStudent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CsvUploader, {\n      csvFile: csvFile,\n      setCsvFile: setCsvFile,\n      handleCsvUpload: handleCsvUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 503,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      searchTerm: searchTerm,\n      setSearchTerm: setSearchTerm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 505,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StudentTable, {\n      students: filteredStudents,\n      editingIndex: editingIndex,\n      bookingIndex: bookingIndex,\n      editData: editData,\n      setEditData: setEditData,\n      handleEditClick: handleEditClick,\n      handleBookClick: handleBookClick,\n      handleSave: handleSave,\n      handleVaccinationSave: handleVaccinationSave,\n      handleMarkAsVaccinated: handleMarkAsVaccinated,\n      handleDelete: handleDelete,\n      setEditingIndex: setEditingIndex,\n      setBookingIndex: setBookingIndex\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 507,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 498,\n    columnNumber: 5\n  }, this);\n};\n_s(ManageStudents, \"QeIlkdsyOqSj0yyfs1M3nEpgrS8=\");\n_c = ManageStudents;\nexport default ManageStudents;\nvar _c;\n$RefreshReg$(_c, \"ManageStudents\");","map":{"version":3,"names":["React","useEffect","useState","axios","StudentForm","CsvUploader","SearchBar","StudentTable","jsxDEV","_jsxDEV","ManageStudents","_s","students","setStudents","newStudent","setNewStudent","name","class","studentId","vaccinationName","vaccinationStatus","vaccinationDate","bookingStatus","editingIndex","setEditingIndex","bookingIndex","setBookingIndex","editData","setEditData","searchTerm","setSearchTerm","csvFile","setCsvFile","fetchStudents","res","get","data","err","console","error","handleAddStudent","studentClass","alert","payload","post","handleEditClick","index","handleBookClick","handleSave","id","put","handleMarkAsVaccinated","handleVaccinationSave","handleDelete","delete","handleCsvUpload","formData","FormData","append","headers","filteredStudents","filter","student","_student$name","_student$studentId","_student$class","_student$vaccinationN","_student$vaccinationS","_student$bookingStatu","term","toLowerCase","includes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/prasanjitsarkar/VS Code/Self/SCHOOL_VACCINATION_PORTAL/frontend/src/components/ManageStudents.js"],"sourcesContent":["/*\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nconst ManageStudents = () => {\n  const [students, setStudents] = useState([]);\n  const [newStudent, setNewStudent] = useState({\n    name: '',\n    class: '',\n    studentId: '',\n    vaccinationName: '',\n    vaccinationStatus: 'Not Vaccinated',\n    vaccinationDate: '',\n    bookingStatus: '',\n  });\n  const [editingIndex, setEditingIndex] = useState(null);\n  const [bookingIndex, setBookingIndex] = useState(null);\n  const [editData, setEditData] = useState({});\n  const [searchTerm, setSearchTerm] = useState('');\n  const [csvFile, setCsvFile] = useState(null);\n\n  const fetchStudents = async () => {\n    try {\n      const res = await axios.get('http://localhost:5000/students');\n      setStudents(res.data);\n    } catch (err) {\n      console.error('Error fetching students:', err);\n    }\n  };\n\n  useEffect(() => {\n    fetchStudents();\n  }, []);\n\n  const handleAddStudent = async () => {\n    const { name, class: studentClass, studentId } = newStudent;\n\n    if (!name || !studentClass || !studentId) {\n      alert('Please fill all fields!');\n      return;\n    }\n\n    const payload = { ...newStudent };\n    if (newStudent.vaccinationStatus === 'Not Vaccinated') {\n      payload.vaccinationDate = null;\n    }\n\n    try {\n      await axios.post('http://localhost:5000/students', payload);\n      setNewStudent({\n        name: '',\n        class: '',\n        studentId: '',\n      });\n      fetchStudents();\n    } catch (err) {\n      console.error('Error adding student:', err);\n    }\n  };\n\n  const handleEditClick = (index) => {\n    setEditingIndex(index);\n    setBookingIndex(null);\n    setEditData({ ...students[index] });\n  };\n\n  const handleBookClick = (index) => {\n    setBookingIndex(index);\n    setEditingIndex(null);\n    setEditData({ ...students[index] });\n  };\n\n  const handleSave = async () => {\n    const { id, bookingStatus, vaccinationStatus } = editData;\n\n    if (bookingStatus === 'Pending' || !bookingStatus || bookingStatus === 'Not Approved') {\n      const { name, class: studentClass, studentId } = editData;\n      if (!name || !studentClass || !studentId) {\n        alert('Please fill all fields!');\n        return;\n      }\n    }\n\n    if (bookingStatus === 'Approved' && vaccinationStatus !== 'Vaccinated') {\n      alert('You can only mark as Vaccinated.');\n      return;\n    }\n\n    try {\n      await axios.put(`http://localhost:5000/students/${id}`, editData);\n      setEditingIndex(null);\n      fetchStudents();\n    } catch (err) {\n      console.error('Error updating student:', err);\n    }\n  };\n\n  const handleMarkAsVaccinated = async () => {\n  try {\n    await axios.put(`http://localhost:5000/vaccinationStatus/${editData.id}`, {\n      ...editData,\n      vaccinationStatus: 'Vaccinated',\n    });\n    setEditingIndex(null);\n    fetchStudents(); // Refreshes updated data\n  } catch (err) {\n    console.error('Error marking vaccinated:', err);\n  }\n};\n\n  const handleVaccinationSave = async () => {\n    const { vaccinationName, vaccinationDate, id } = editData;\n\n    if (!vaccinationName || !vaccinationDate) {\n      alert('Please fill all vaccination fields!');\n      return;\n    }\n\n    try {\n      await axios.put(`http://localhost:5000/vaccination/${id}`, {\n        vaccinationName,\n        vaccinationDate,\n        vaccinationStatus: 'Not Vaccinated',\n        bookingStatus: 'Pending',\n      });\n\n      setBookingIndex(null);\n      fetchStudents();\n    } catch (err) {\n      console.error('Error saving vaccination info:', err);\n    }\n  };\n\n  const handleDelete = async (id) => {\n    try {\n      await axios.delete(`http://localhost:5000/students/${id}`);\n      fetchStudents();\n    } catch (err) {\n      console.error('Error deleting student:', err);\n    }\n  };\n\n  const handleCsvUpload = async () => {\n    if (!csvFile) {\n      alert('Please select a CSV file first!');\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('file', csvFile);\n\n    try {\n      await axios.post('http://localhost:5000/upload-csv', formData, {\n        headers: { 'Content-Type': 'multipart/form-data' },\n      });\n      alert('CSV uploaded successfully!');\n      setCsvFile(null);\n      fetchStudents();\n    } catch (err) {\n      console.error('CSV upload error:', err);\n      alert('Failed to upload CSV');\n    }\n  };\n\n  const filteredStudents = students.filter((student) => {\n    const term = searchTerm.toLowerCase();\n    return (\n      student.name?.toLowerCase().includes(term) ||\n      student.studentId?.toLowerCase().includes(term) ||\n      student.class?.toLowerCase().includes(term) ||\n      student.vaccinationName?.toLowerCase().includes(term) ||\n      student.vaccinationStatus?.toLowerCase().includes(term) ||\n      student.bookingStatus?.toLowerCase().includes(term)\n    );\n  });\n\n  return (\n    <div className=\"p-8 max-w-6xl mx-auto\">\n      <h1 className=\"text-3xl font-bold mb-6\">Manage Students</h1>\n\n     \n      <div className=\"mb-8 border p-4 rounded shadow\">\n        <h2 className=\"text-xl font-semibold mb-4\">Add New Student</h2>\n        <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n          <input placeholder=\"Name\" value={newStudent.name} onChange={(e) => setNewStudent({ ...newStudent, name: e.target.value })} className=\"border p-2 rounded\" />\n          <input placeholder=\"Class\" value={newStudent.class} onChange={(e) => setNewStudent({ ...newStudent, class: e.target.value })} className=\"border p-2 rounded\" />\n          <input placeholder=\"Student ID\" value={newStudent.studentId} onChange={(e) => setNewStudent({ ...newStudent, studentId: e.target.value })} className=\"border p-2 rounded\" />\n        </div>\n        <button onClick={handleAddStudent} className=\"btn btn-primary mt-4\">Add Student</button>\n      </div>\n\n   \n      <div className=\"mb-8 border p-4 rounded shadow\">\n        <h2 className=\"text-xl font-semibold mb-4\">Bulk Upload via CSV</h2>\n        <input type=\"file\" accept=\".csv\" onChange={(e) => setCsvFile(e.target.files[0])} className=\"mb-2\" />\n        <button onClick={handleCsvUpload} className=\"btn btn-secondary\" disabled={!csvFile}>Upload CSV</button>\n      </div>\n\n     \n      <input placeholder=\"Search...\" value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className=\"border p-2 rounded w-full mb-4\" />\n\n   \n      <table className=\"w-full border-collapse border\">\n        <thead>\n          <tr className=\"bg-gray-100\">\n            <th className=\"border p-2\">Name</th>\n            <th className=\"border p-2\">Class</th>\n            <th className=\"border p-2\">Student ID</th>\n            <th className=\"border p-2\">Booking Status</th>\n            <th className=\"border p-2\">Vaccination</th>\n            <th className=\"border p-2\">Date</th>\n            <th className=\"border p-2\">Status</th>\n            <th className=\"border p-2\">Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {filteredStudents.map((student, index) => {\n            const isEditing = editingIndex === index;\n            const isBooking = bookingIndex === index;\n\n            return (\n              <tr key={student.id}>\n                {isEditing ? (\n                  <>\n                    <td className=\"border p-2\">\n                      {(editData.bookingStatus === 'Pending' || !editData.bookingStatus || editData.bookingStatus === 'Not Approved') ? (\n                        <input value={editData.name} onChange={(e) => setEditData({ ...editData, name: e.target.value })} className=\"border p-1 rounded w-full\" />\n                      ) : (\n                        editData.name\n                      )}\n                    </td>\n                    <td className=\"border p-2\">\n                      {(editData.bookingStatus === 'Pending' || !editData.bookingStatus || editData.bookingStatus === 'Not Approved') ? (\n                        <input value={editData.class} onChange={(e) => setEditData({ ...editData, class: e.target.value })} className=\"border p-1 rounded w-full\" />\n                      ) : (\n                        editData.class\n                      )}\n                    </td>\n                    <td className=\"border p-2\">\n                      {(editData.bookingStatus === 'Pending' || !editData.bookingStatus || editData.bookingStatus === 'Not Approved') ? (\n                        <input value={editData.studentId} onChange={(e) => setEditData({ ...editData, studentId: e.target.value })} className=\"border p-1 rounded w-full\" />\n                      ) : (\n                        editData.studentId\n                      )}\n                    </td>\n                    <td className=\"border p-2\">{editData.bookingStatus}</td>\n                    <td className=\"border p-2\">{editData.vaccinationName}</td>\n                    <td className=\"border p-2\">{editData.vaccinationDate ? new Date(editData.vaccinationDate).toLocaleDateString() : 'â€”'}</td>\n                    <td className=\"border p-2\">\n                      {editData.bookingStatus === 'Approved' && editData.vaccinationStatus !== 'Vaccinated' ? (\n                        <button onClick={handleMarkAsVaccinated} className=\"bg-blue-600 text-white px-2 py-1 rounded\">Mark as Vaccinated</button>\n                      ) : (\n                        editData.vaccinationStatus\n                      )}\n                    </td>\n                    <td className=\"border p-2 space-x-2\">\n                      <button onClick={handleSave} className=\"bg-green-600 text-white px-2 py-1 rounded\">Save</button>\n                      <button onClick={() => setEditingIndex(null)} className=\"bg-gray-500 text-white px-2 py-1 rounded\">Cancel</button>\n                    </td>\n                  </>\n                ) : isBooking ? (\n                  <>\n                    <td className=\"border p-2\">{student.name}</td>\n                    <td className=\"border p-2\">{student.class}</td>\n                    <td className=\"border p-2\">{student.studentId}</td>\n                    <td className=\"border p-2\">{student.bookingStatus}</td>\n                    <td className=\"border p-2\">\n                      <input value={editData.vaccinationName || ''} onChange={(e) => setEditData({ ...editData, vaccinationName: e.target.value })} className=\"border p-1 rounded w-full\" />\n                    </td>\n                    <td className=\"border p-2\">\n                      <input type=\"date\" value={editData.vaccinationDate || ''} onChange={(e) => setEditData({ ...editData, vaccinationDate: e.target.value })} className=\"border p-1 rounded w-full\" />\n                    </td>\n                    <td className=\"border p-2\">{editData.vaccinationStatus || 'Not Vaccinated'}</td>\n                    <td className=\"border p-2 space-x-2\">\n                      <button onClick={handleVaccinationSave} className=\"bg-blue-600 text-white px-2 py-1 rounded\">Save</button>\n                      <button onClick={() => setBookingIndex(null)} className=\"bg-gray-500 text-white px-2 py-1 rounded\">Cancel</button>\n                    </td>\n                  </>\n                ) : (\n                  <>\n                    <td className=\"border p-2\">{student.name}</td>\n                    <td className=\"border p-2\">{student.class}</td>\n                    <td className=\"border p-2\">{student.studentId}</td>\n                    <td className=\"border p-2\">{student.bookingStatus}</td>\n                    <td className=\"border p-2\">{student.vaccinationName}</td>\n                    <td className=\"border p-2\">{student.vaccinationDate ? new Date(student.vaccinationDate).toLocaleDateString() : 'â€”'}</td>\n                    <td className=\"border p-2\">{student.vaccinationStatus}</td>\n                    <td className=\"border p-2 space-x-2\">\n                      <button\n                        onClick={() => handleEditClick(index)}\n                        className=\"btn btn-sm btn-warning\"\n                        disabled={student.bookingStatus === 'Approved' && student.vaccinationStatus === 'Vaccinated'}\n                      >\n                        Edit\n                      </button>\n                      <button onClick={() => handleDelete(student.id)} className=\"btn btn-sm btn-danger\">Delete</button>\n                      <button\n                        onClick={() => handleBookClick(index)}\n                        className=\"btn btn-sm btn-success\"\n                        disabled={student.bookingStatus === 'Approved' || student.bookingStatus === 'Pending'}\n                      >\n                        Book Drive\n                      </button>\n                    </td>\n                  </>\n                )}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default ManageStudents;\n\n\n*/\n\n\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nimport StudentForm from './StudentForm';\nimport CsvUploader from './CsvUploader';\nimport SearchBar from './SearchBar';\nimport StudentTable from './StudentTable';\n\nconst ManageStudents = () => {\n  const [students, setStudents] = useState([]);\n  const [newStudent, setNewStudent] = useState({\n    name: '',\n    class: '',\n    studentId: '',\n    vaccinationName: '',\n    vaccinationStatus: 'Not Vaccinated',\n    vaccinationDate: '',\n    bookingStatus: '',\n  });\n  const [editingIndex, setEditingIndex] = useState(null);\n  const [bookingIndex, setBookingIndex] = useState(null);\n  const [editData, setEditData] = useState({});\n  const [searchTerm, setSearchTerm] = useState('');\n  const [csvFile, setCsvFile] = useState(null);\n\n  const fetchStudents = async () => {\n    try {\n      const res = await axios.get('http://localhost:5000/students');\n      setStudents(res.data);\n    } catch (err) {\n      console.error('Error fetching students:', err);\n    }\n  };\n\n  useEffect(() => {\n    fetchStudents();\n  }, []);\n\n  const handleAddStudent = async () => {\n    const { name, class: studentClass, studentId } = newStudent;\n    if (!name || !studentClass || !studentId) {\n      alert('Please fill all fields!');\n      return;\n    }\n\n    const payload = { ...newStudent };\n    if (newStudent.vaccinationStatus === 'Not Vaccinated') {\n      payload.vaccinationDate = null;\n    }\n\n    try {\n      await axios.post('http://localhost:5000/students', payload);\n      setNewStudent({ name: '', class: '', studentId: '' });\n      fetchStudents();\n    } catch (err) {\n      console.error('Error adding student:', err);\n    }\n  };\n\n  const handleEditClick = (index) => {\n    setEditingIndex(index);\n    setBookingIndex(null);\n    setEditData({ ...students[index] });\n  };\n\n  const handleBookClick = (index) => {\n    setBookingIndex(index);\n    setEditingIndex(null);\n    setEditData({ ...students[index] });\n  };\n\n  const handleSave = async () => {\n    const { id, bookingStatus, vaccinationStatus } = editData;\n    if (bookingStatus === 'Pending' || !bookingStatus || bookingStatus === 'Not Approved') {\n      const { name, class: studentClass, studentId } = editData;\n      if (!name || !studentClass || !studentId) {\n        alert('Please fill all fields!');\n        return;\n      }\n    }\n\n    if (bookingStatus === 'Approved' && vaccinationStatus !== 'Vaccinated') {\n      alert('You can only mark as Vaccinated.');\n      return;\n    }\n\n    try {\n      await axios.put(`http://localhost:5000/students/${id}`, editData);\n      setEditingIndex(null);\n      fetchStudents();\n    } catch (err) {\n      console.error('Error updating student:', err);\n    }\n  };\n\n  const handleMarkAsVaccinated = async () => {\n    try {\n      await axios.put(`http://localhost:5000/vaccinationStatus/${editData.id}`, {\n        ...editData,\n        vaccinationStatus: 'Vaccinated',\n      });\n      setEditingIndex(null);\n      fetchStudents();\n    } catch (err) {\n      console.error('Error marking vaccinated:', err);\n    }\n  };\n\n  const handleVaccinationSave = async () => {\n    const { vaccinationName, vaccinationDate, id } = editData;\n\n    if (!vaccinationName || !vaccinationDate) {\n      alert('Please fill all vaccination fields!');\n      return;\n    }\n\n    try {\n      await axios.put(`http://localhost:5000/vaccination/${id}`, {\n        vaccinationName,\n        vaccinationDate,\n        vaccinationStatus: 'Not Vaccinated',\n        bookingStatus: 'Pending',\n      });\n\n      setBookingIndex(null);\n      fetchStudents();\n    } catch (err) {\n      console.error('Error saving vaccination info:', err);\n    }\n  };\n\n  const handleDelete = async (id) => {\n    try {\n      await axios.delete(`http://localhost:5000/students/${id}`);\n      fetchStudents();\n    } catch (err) {\n      console.error('Error deleting student:', err);\n    }\n  };\n\n  const handleCsvUpload = async () => {\n    if (!csvFile) {\n      alert('Please select a CSV file first!');\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('file', csvFile);\n\n    try {\n      await axios.post('http://localhost:5000/upload-csv', formData, {\n        headers: { 'Content-Type': 'multipart/form-data' },\n      });\n      alert('CSV uploaded successfully!');\n      setCsvFile(null);\n      fetchStudents();\n    } catch (err) {\n      console.error('CSV upload error:', err);\n      alert('Failed to upload CSV');\n    }\n  };\n\n  const filteredStudents = students.filter((student) => {\n    const term = searchTerm.toLowerCase();\n    return (\n      student.name?.toLowerCase().includes(term) ||\n      student.studentId?.toLowerCase().includes(term) ||\n      student.class?.toLowerCase().includes(term) ||\n      student.vaccinationName?.toLowerCase().includes(term) ||\n      student.vaccinationStatus?.toLowerCase().includes(term) ||\n      student.bookingStatus?.toLowerCase().includes(term)\n    );\n  });\n\n  return (\n    <div className=\"p-8 max-w-6xl mx-auto\">\n      <h1 className=\"text-3xl font-bold mb-6\">Manage Students</h1>\n\n      <StudentForm newStudent={newStudent} setNewStudent={setNewStudent} handleAddStudent={handleAddStudent} />\n\n      <CsvUploader csvFile={csvFile} setCsvFile={setCsvFile} handleCsvUpload={handleCsvUpload} />\n\n      <SearchBar searchTerm={searchTerm} setSearchTerm={setSearchTerm} />\n\n      <StudentTable\n        students={filteredStudents}\n        editingIndex={editingIndex}\n        bookingIndex={bookingIndex}\n        editData={editData}\n        setEditData={setEditData}\n        handleEditClick={handleEditClick}\n        handleBookClick={handleBookClick}\n        handleSave={handleSave}\n        handleVaccinationSave={handleVaccinationSave}\n        handleMarkAsVaccinated={handleMarkAsVaccinated}\n        handleDelete={handleDelete}\n        setEditingIndex={setEditingIndex}\n        setBookingIndex={setBookingIndex}\n      />\n    </div>\n  );\n};\n\nexport default ManageStudents;"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}