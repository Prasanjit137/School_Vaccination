{"ast":null,"code":"var _jsxFileName = \"/Users/prasanjitsarkar/.Trash/frontend 12-14-35-774/src/components/ManageVaccinations.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport DriveForm from './DriveForm';\nimport DriveTable from './DriveTables';\nimport ToggleSwitch from './ToggleSwitch';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ManageVaccinations = () => {\n  _s();\n  const [form, setForm] = useState({\n    vaccineName: '',\n    date: '',\n    doses: '',\n    classes: ''\n  });\n  const [drives, setDrives] = useState([]);\n  const [editingId, setEditingId] = useState(null);\n  const [enableChanges, setEnableChanges] = useState(false);\n  useEffect(() => {\n    fetchDrives();\n  }, []);\n  const fetchDrives = async () => {\n    const token = localStorage.getItem('token');\n    try {\n      const res = await fetch('http://localhost:5000/vaccination-drives', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const data = await res.json();\n      setDrives(data);\n    } catch (err) {\n      console.error('Failed to fetch drives:', err);\n    }\n  };\n  const isEditable = dateStr => {\n    const driveDate = new Date(dateStr);\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const minDate = new Date();\n    minDate.setDate(today.getDate() + 15);\n    return driveDate >= minDate;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-primary mb-4\",\n      children: \"Vaccination Drive Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(ToggleSwitch, {\n      enableChanges: enableChanges,\n      setEnableChanges: setEnableChanges\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4\",\n      children: /*#__PURE__*/_jsxDEV(DriveForm, {\n        form: form,\n        setForm: setForm,\n        editingId: editingId,\n        setEditingId: setEditingId,\n        drives: drives,\n        fetchDrives: fetchDrives,\n        enableChanges: enableChanges\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-5\",\n      children: /*#__PURE__*/_jsxDEV(DriveTable, {\n        drives: drives,\n        handleEdit: drive => {\n          setForm({\n            vaccineName: drive.vaccine,\n            date: drive.date,\n            doses: drive.doses,\n            classes: drive.classes\n          });\n          setEditingId(drive.id);\n        },\n        handleDelete: async id => {\n          if (!window.confirm('Are you sure you want to delete this drive?')) return;\n          const token = localStorage.getItem('token');\n          try {\n            await fetch(`http://localhost:5000/vaccination-drives/${id}`, {\n              method: 'DELETE',\n              headers: {\n                Authorization: `Bearer ${token}`\n              }\n            });\n            fetchDrives();\n          } catch (err) {\n            console.error('Error deleting drive:', err);\n          }\n        },\n        enableChanges: enableChanges,\n        isEditable: isEditable\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(ManageVaccinations, \"T/QlV3tcH/F5MWHQi5GR3TtbYvU=\");\n_c = ManageVaccinations;\nexport default ManageVaccinations;\n/*\nimport React, { useEffect, useState } from 'react';\n\nconst ManageVaccinations = () => {\n  const [form, setForm] = useState({\n    vaccineName: '',\n    date: '',\n    doses: '',\n    classes: '',\n  });\n\n  const [drives, setDrives] = useState([]);\n  const [editingId, setEditingId] = useState(null);\n  const [enableChanges, setEnableChanges] = useState(false); // toggle\n\n  useEffect(() => {\n    fetchDrives();\n  }, []);\n\n  const fetchDrives = async () => {\n    const token = localStorage.getItem('token');\n    try {\n      const res = await fetch('http://localhost:5000/vaccination-drives', {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      const data = await res.json();\n      setDrives(data);\n    } catch (err) {\n      console.error('Failed to fetch drives:', err);\n    }\n  };\n\n  const handleChange = (e) => {\n    setForm({ ...form, [e.target.name]: e.target.value });\n  };\n\n  const handleCreateOrUpdate = async (e) => {\n    e.preventDefault();\n    const token = localStorage.getItem('token');\n\n    const selectedDate = new Date(form.date);\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const minAllowedDate = new Date();\n    minAllowedDate.setDate(today.getDate() + 15);\n\n    const isCreating = editingId === null;\n    const isDateChanged = drives.find((d) => d.id === editingId)?.date !== form.date;\n\n    if (!enableChanges && (isCreating || isDateChanged) && selectedDate < minAllowedDate) {\n      alert('Vaccination drive date must be at least 15 days from today.');\n      return;\n    }\n\n    const payload = {\n      vaccine: form.vaccineName,\n      date: form.date,\n      doses: parseInt(form.doses),\n      classes: form.classes,\n    };\n\n    try {\n      let url = 'http://localhost:5000/vaccination-drives';\n      let method = 'POST';\n\n      if (editingId !== null) {\n        url += `/${editingId}`;\n        method = 'PUT';\n      }\n\n      const res = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(payload),\n      });\n\n      const data = await res.json();\n      console.log(data.message);\n\n      setForm({ vaccineName: '', date: '', doses: '', classes: '' });\n      setEditingId(null);\n      fetchDrives();\n    } catch (err) {\n      console.error('Error saving drive:', err);\n    }\n  };\n\n  const handleEdit = (drive) => {\n    setForm({\n      vaccineName: drive.vaccine,\n      date: drive.date,\n      doses: drive.doses,\n      classes: drive.classes,\n    });\n    setEditingId(drive.id);\n  };\n\n  const handleDelete = async (id) => {\n    if (!window.confirm('Are you sure you want to delete this drive?')) return;\n\n    const token = localStorage.getItem('token');\n    try {\n      await fetch(`http://localhost:5000/vaccination-drives/${id}`, {\n        method: 'DELETE',\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      fetchDrives();\n    } catch (err) {\n      console.error('Error deleting drive:', err);\n    }\n  };\n\n  const isEditable = (dateStr) => {\n    const driveDate = new Date(dateStr);\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const minDate = new Date();\n    minDate.setDate(today.getDate() + 15);\n    return driveDate >= minDate;\n  };\n\n  return (\n    <div className=\"container mt-4\">\n      <h2>Vaccination Drive Management</h2>\n\n      <div className=\"form-check form-switch mt-3\">\n        <input\n          className=\"form-check-input\"\n          type=\"checkbox\"\n          id=\"enableChanges\"\n          checked={enableChanges}\n          onChange={() => setEnableChanges(!enableChanges)}\n        />\n        <label className=\"form-check-label\" htmlFor=\"enableChanges\">\n          Enable Changes\n        </label>\n      </div>\n\n      <div className=\"card p-3 mt-4\">\n        <h4>{editingId !== null ? 'Edit Drive' : 'Create Vaccination Drive'}</h4>\n        <form onSubmit={handleCreateOrUpdate}>\n          <div className=\"mb-3\">\n            <label className=\"form-label\">Vaccine Name</label>\n            <input\n              type=\"text\"\n              name=\"vaccineName\"\n              className=\"form-control\"\n              value={form.vaccineName}\n              onChange={handleChange}\n              required\n            />\n          </div>\n\n          <div className=\"mb-3\">\n            <label className=\"form-label\">Date of Drive</label>\n            <input\n              type=\"date\"\n              name=\"date\"\n              className=\"form-control\"\n              value={form.date}\n              onChange={handleChange}\n              required\n            />\n          </div>\n\n          <div className=\"mb-3\">\n            <label className=\"form-label\">Number of Available Doses</label>\n            <input\n              type=\"number\"\n              name=\"doses\"\n              className=\"form-control\"\n              value={form.doses}\n              onChange={handleChange}\n              required\n            />\n          </div>\n\n          <div className=\"mb-3\">\n            <label className=\"form-label\">Applicable Classes</label>\n            <input\n              type=\"text\"\n              name=\"classes\"\n              className=\"form-control\"\n              value={form.classes}\n              onChange={handleChange}\n              required\n            />\n          </div>\n\n          <button type=\"submit\" className=\"btn btn-primary\">\n            {editingId !== null ? 'Update' : 'Create'}\n          </button>\n          {editingId !== null && (\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary ms-2\"\n              onClick={() => {\n                setEditingId(null);\n                setForm({ vaccineName: '', date: '', doses: '', classes: '' });\n              }}\n            >\n              Cancel\n            </button>\n          )}\n        </form>\n      </div>\n\n      <div className=\"card mt-5 p-3\">\n        <h4>Upcoming Vaccination Drives</h4>\n        <table className=\"table table-bordered mt-3\">\n          <thead>\n            <tr>\n              <th>Vaccine</th>\n              <th>Date</th>\n              <th>Doses</th>\n              <th>Classes</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {drives.map((drive) => {\n              const isDriveEditable = isEditable(drive.date);\n              return (\n                <tr key={drive.id}>\n                  <td>{drive.vaccine}</td>\n                  <td>{new Date(drive.date).toLocaleDateString()}</td>\n                  <td>{drive.doses}</td>\n                  <td>{drive.classes}</td>\n                  <td>\n                    <button\n                      className=\"btn btn-sm btn-warning me-2\"\n                      onClick={() => handleEdit(drive)}\n                      disabled={!enableChanges && !isDriveEditable}\n                    >\n                      Edit\n                    </button>\n                    <button\n                      className=\"btn btn-sm btn-danger\"\n                      onClick={() => handleDelete(drive.id)}\n                    >\n                      Delete\n                    </button>\n                  </td>\n                </tr>\n              );\n            })}\n            {drives.length === 0 && (\n              <tr>\n                <td colSpan=\"5\" className=\"text-center\">\n                  No drives found\n                </td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default ManageVaccinations;\n\n\n*/\n/*\nimport React, { useEffect, useState } from 'react';\n\nconst ManageVaccinations = () => {\n  const [form, setForm] = useState({\n    vaccineName: '',\n    date: '',\n    doses: '',\n    classes: '',\n  });\n\n  const [drives, setDrives] = useState([]);\n  const [editingId, setEditingId] = useState(null);\n\n  useEffect(() => {\n    fetchDrives();\n  }, []);\n\n  const fetchDrives = async () => {\n    const token = localStorage.getItem('token');\n    try {\n      const res = await fetch('http://localhost:5000/vaccination-drives', {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      const data = await res.json();\n      setDrives(data);\n    } catch (err) {\n      console.error('Failed to fetch drives:', err);\n    }\n  };\n\n  const handleChange = (e) => {\n    setForm({ ...form, [e.target.name]: e.target.value });\n  };\n\n  const handleCreateOrUpdate = async (e) => {\n    e.preventDefault();\n    const token = localStorage.getItem('token');\n\n    const selectedDate = new Date(form.date);\n    const today = new Date();\n    const minAllowedDate = new Date();\n    minAllowedDate.setDate(today.getDate() + 15);\n\n    const originalDrive = drives.find((d) => d.id === editingId);\n    const isDateChanged = editingId !== null && originalDrive && originalDrive.date !== form.date;\n    const isCreating = editingId === null;\n\n    if ((isCreating || isDateChanged) && selectedDate < minAllowedDate) {\n      alert('Vaccination drive date must be at least 15 days from today.');\n      return;\n    }\n\n    const payload = {\n      vaccine: form.vaccineName,\n      date: form.date,\n      doses: parseInt(form.doses),\n      classes: form.classes,\n    };\n\n    try {\n      let url = 'http://localhost:5000/vaccination-drives';\n      let method = 'POST';\n\n      if (editingId !== null) {\n        url += `/${editingId}`;\n        method = 'PUT';\n      }\n\n      const res = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(payload),\n      });\n\n      const data = await res.json();\n      console.log(data.message);\n\n      setForm({ vaccineName: '', date: '', doses: '', classes: '' });\n      setEditingId(null);\n      fetchDrives();\n    } catch (err) {\n      console.error('Error saving drive:', err);\n    }\n  };\n\n  const handleEdit = (drive) => {\n    setForm({\n      vaccineName: drive.vaccine,\n      date: drive.date,\n      doses: drive.doses,\n      classes: drive.classes,\n    });\n    setEditingId(drive.id);\n  };\n\n  const handleDelete = async (id) => {\n    if (!window.confirm('Are you sure you want to delete this drive?')) return;\n\n    const token = localStorage.getItem('token');\n    try {\n      await fetch(`http://localhost:5000/vaccination-drives/${id}`, {\n        method: 'DELETE',\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      fetchDrives();\n    } catch (err) {\n      console.error('Error deleting drive:', err);\n    }\n  };\n\n  const isDateWithin15Days = (date) => {\n    const driveDate = new Date(date);\n    const today = new Date();\n    const threshold = new Date();\n    threshold.setDate(today.getDate() + 15);\n    return driveDate < threshold;\n  };\n\n  return (\n    <div className=\"container mt-4\">\n      <h2>Vaccination Drive Management</h2>\n\n      <div className=\"card p-3 mt-4\">\n        <h4>{editingId !== null ? 'Edit Drive' : 'Create Vaccination Drive'}</h4>\n        <form onSubmit={handleCreateOrUpdate}>\n          <div className=\"mb-3\">\n            <label className=\"form-label\">Vaccine Name</label>\n            <input\n              type=\"text\"\n              name=\"vaccineName\"\n              className=\"form-control\"\n              value={form.vaccineName}\n              onChange={handleChange}\n              required\n            />\n          </div>\n\n          <div className=\"mb-3\">\n            <label className=\"form-label\">Date of Drive</label>\n            <input\n              type=\"date\"\n              name=\"date\"\n              className=\"form-control\"\n              value={form.date}\n              onChange={handleChange}\n              required\n            />\n          </div>\n\n          <div className=\"mb-3\">\n            <label className=\"form-label\">Number of Available Doses</label>\n            <input\n              type=\"number\"\n              name=\"doses\"\n              className=\"form-control\"\n              value={form.doses}\n              onChange={handleChange}\n              required\n            />\n          </div>\n\n          <div className=\"mb-3\">\n            <label className=\"form-label\">Applicable Classes</label>\n            <input\n              type=\"text\"\n              name=\"classes\"\n              className=\"form-control\"\n              value={form.classes}\n              onChange={handleChange}\n              required\n            />\n          </div>\n\n          <button type=\"submit\" className=\"btn btn-primary\">\n            {editingId !== null ? 'Update' : 'Create'}\n          </button>\n          {editingId !== null && (\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary ms-2\"\n              onClick={() => {\n                setEditingId(null);\n                setForm({ vaccineName: '', date: '', doses: '', classes: '' });\n              }}\n            >\n              Cancel\n            </button>\n          )}\n        </form>\n      </div>\n\n      <div className=\"card mt-5 p-3\">\n        <h4>Upcoming Vaccination Drives</h4>\n        <table className=\"table table-bordered mt-3\">\n          <thead>\n            <tr>\n              <th>Vaccine</th>\n              <th>Date</th>\n              <th>Doses</th>\n              <th>Classes</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {drives.map((drive) => {\n              const isTooClose = isDateWithin15Days(drive.date);\n              return (\n                <tr key={drive.id}>\n                  <td>{drive.vaccine}</td>\n                  <td>{new Date(drive.date).toLocaleDateString()}</td>\n                  <td>{drive.doses}</td>\n                  <td>{drive.classes}</td>\n                  <td>\n                    <button\n                      className=\"btn btn-sm btn-warning me-2\"\n                      onClick={() => handleEdit(drive)}\n                      disabled={isTooClose}\n                      title={isTooClose ? \"Cannot edit a drive scheduled in less than 15 days\" : \"Edit\"}\n                    >\n                      Edit\n                    </button>\n                    <button className=\"btn btn-sm btn-danger\" onClick={() => handleDelete(drive.id)}>\n                      Delete\n                    </button>\n                  </td>\n                </tr>\n              );\n            })}\n            {drives.length === 0 && (\n              <tr>\n                <td colSpan=\"5\" className=\"text-center\">No drives found</td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default ManageVaccinations;\n\n*/\nvar _c;\n$RefreshReg$(_c, \"ManageVaccinations\");","map":{"version":3,"names":["React","useEffect","useState","DriveForm","DriveTable","ToggleSwitch","jsxDEV","_jsxDEV","ManageVaccinations","_s","form","setForm","vaccineName","date","doses","classes","drives","setDrives","editingId","setEditingId","enableChanges","setEnableChanges","fetchDrives","token","localStorage","getItem","res","fetch","headers","Authorization","data","json","err","console","error","isEditable","dateStr","driveDate","Date","today","setHours","minDate","setDate","getDate","className","children","fileName","_jsxFileName","lineNumber","columnNumber","handleEdit","drive","vaccine","id","handleDelete","window","confirm","method","_c","$RefreshReg$"],"sources":["/Users/prasanjitsarkar/.Trash/frontend 12-14-35-774/src/components/ManageVaccinations.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport DriveForm from './DriveForm';\nimport DriveTable from './DriveTables';\nimport ToggleSwitch from './ToggleSwitch';\n\nconst ManageVaccinations = () => {\n  const [form, setForm] = useState({\n    vaccineName: '',\n    date: '',\n    doses: '',\n    classes: '',\n  });\n  const [drives, setDrives] = useState([]);\n  const [editingId, setEditingId] = useState(null);\n  const [enableChanges, setEnableChanges] = useState(false);\n\n  useEffect(() => {\n    fetchDrives();\n  }, []);\n\n  const fetchDrives = async () => {\n    const token = localStorage.getItem('token');\n    try {\n      const res = await fetch('http://localhost:5000/vaccination-drives', {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      const data = await res.json();\n      setDrives(data);\n    } catch (err) {\n      console.error('Failed to fetch drives:', err);\n    }\n  };\n\n  const isEditable = (dateStr) => {\n    const driveDate = new Date(dateStr);\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const minDate = new Date();\n    minDate.setDate(today.getDate() + 15);\n    return driveDate >= minDate;\n  };\n\n  return (\n    <div className=\"container mt-4\">\n  <h2 className=\"text-primary mb-4\">Vaccination Drive Management</h2>\n\n  <ToggleSwitch\n    enableChanges={enableChanges}\n    setEnableChanges={setEnableChanges}\n  />\n\n  <div className=\"mt-4\">\n    <DriveForm\n      form={form}\n      setForm={setForm}\n      editingId={editingId}\n      setEditingId={setEditingId}\n      drives={drives}\n      fetchDrives={fetchDrives}\n      enableChanges={enableChanges}\n    />\n  </div>\n\n  <div className=\"mt-5\">\n    <DriveTable\n      drives={drives}\n      handleEdit={(drive) => {\n        setForm({\n          vaccineName: drive.vaccine,\n          date: drive.date,\n          doses: drive.doses,\n          classes: drive.classes,\n        });\n        setEditingId(drive.id);\n      }}\n      handleDelete={async (id) => {\n        if (!window.confirm('Are you sure you want to delete this drive?')) return;\n        const token = localStorage.getItem('token');\n        try {\n          await fetch(`http://localhost:5000/vaccination-drives/${id}`, {\n            method: 'DELETE',\n            headers: { Authorization: `Bearer ${token}` },\n          });\n          fetchDrives();\n        } catch (err) {\n          console.error('Error deleting drive:', err);\n        }\n      }}\n      enableChanges={enableChanges}\n      isEditable={isEditable}\n    />\n  </div>\n</div>\n  );\n};\n\nexport default ManageVaccinations;\n/*\nimport React, { useEffect, useState } from 'react';\n\nconst ManageVaccinations = () => {\n  const [form, setForm] = useState({\n    vaccineName: '',\n    date: '',\n    doses: '',\n    classes: '',\n  });\n\n  const [drives, setDrives] = useState([]);\n  const [editingId, setEditingId] = useState(null);\n  const [enableChanges, setEnableChanges] = useState(false); // toggle\n\n  useEffect(() => {\n    fetchDrives();\n  }, []);\n\n  const fetchDrives = async () => {\n    const token = localStorage.getItem('token');\n    try {\n      const res = await fetch('http://localhost:5000/vaccination-drives', {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      const data = await res.json();\n      setDrives(data);\n    } catch (err) {\n      console.error('Failed to fetch drives:', err);\n    }\n  };\n\n  const handleChange = (e) => {\n    setForm({ ...form, [e.target.name]: e.target.value });\n  };\n\n  const handleCreateOrUpdate = async (e) => {\n    e.preventDefault();\n    const token = localStorage.getItem('token');\n\n    const selectedDate = new Date(form.date);\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const minAllowedDate = new Date();\n    minAllowedDate.setDate(today.getDate() + 15);\n\n    const isCreating = editingId === null;\n    const isDateChanged = drives.find((d) => d.id === editingId)?.date !== form.date;\n\n    if (!enableChanges && (isCreating || isDateChanged) && selectedDate < minAllowedDate) {\n      alert('Vaccination drive date must be at least 15 days from today.');\n      return;\n    }\n\n    const payload = {\n      vaccine: form.vaccineName,\n      date: form.date,\n      doses: parseInt(form.doses),\n      classes: form.classes,\n    };\n\n    try {\n      let url = 'http://localhost:5000/vaccination-drives';\n      let method = 'POST';\n\n      if (editingId !== null) {\n        url += `/${editingId}`;\n        method = 'PUT';\n      }\n\n      const res = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(payload),\n      });\n\n      const data = await res.json();\n      console.log(data.message);\n\n      setForm({ vaccineName: '', date: '', doses: '', classes: '' });\n      setEditingId(null);\n      fetchDrives();\n    } catch (err) {\n      console.error('Error saving drive:', err);\n    }\n  };\n\n  const handleEdit = (drive) => {\n    setForm({\n      vaccineName: drive.vaccine,\n      date: drive.date,\n      doses: drive.doses,\n      classes: drive.classes,\n    });\n    setEditingId(drive.id);\n  };\n\n  const handleDelete = async (id) => {\n    if (!window.confirm('Are you sure you want to delete this drive?')) return;\n\n    const token = localStorage.getItem('token');\n    try {\n      await fetch(`http://localhost:5000/vaccination-drives/${id}`, {\n        method: 'DELETE',\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      fetchDrives();\n    } catch (err) {\n      console.error('Error deleting drive:', err);\n    }\n  };\n\n  const isEditable = (dateStr) => {\n    const driveDate = new Date(dateStr);\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const minDate = new Date();\n    minDate.setDate(today.getDate() + 15);\n    return driveDate >= minDate;\n  };\n\n  return (\n    <div className=\"container mt-4\">\n      <h2>Vaccination Drive Management</h2>\n\n      <div className=\"form-check form-switch mt-3\">\n        <input\n          className=\"form-check-input\"\n          type=\"checkbox\"\n          id=\"enableChanges\"\n          checked={enableChanges}\n          onChange={() => setEnableChanges(!enableChanges)}\n        />\n        <label className=\"form-check-label\" htmlFor=\"enableChanges\">\n          Enable Changes\n        </label>\n      </div>\n\n      <div className=\"card p-3 mt-4\">\n        <h4>{editingId !== null ? 'Edit Drive' : 'Create Vaccination Drive'}</h4>\n        <form onSubmit={handleCreateOrUpdate}>\n          <div className=\"mb-3\">\n            <label className=\"form-label\">Vaccine Name</label>\n            <input\n              type=\"text\"\n              name=\"vaccineName\"\n              className=\"form-control\"\n              value={form.vaccineName}\n              onChange={handleChange}\n              required\n            />\n          </div>\n\n          <div className=\"mb-3\">\n            <label className=\"form-label\">Date of Drive</label>\n            <input\n              type=\"date\"\n              name=\"date\"\n              className=\"form-control\"\n              value={form.date}\n              onChange={handleChange}\n              required\n            />\n          </div>\n\n          <div className=\"mb-3\">\n            <label className=\"form-label\">Number of Available Doses</label>\n            <input\n              type=\"number\"\n              name=\"doses\"\n              className=\"form-control\"\n              value={form.doses}\n              onChange={handleChange}\n              required\n            />\n          </div>\n\n          <div className=\"mb-3\">\n            <label className=\"form-label\">Applicable Classes</label>\n            <input\n              type=\"text\"\n              name=\"classes\"\n              className=\"form-control\"\n              value={form.classes}\n              onChange={handleChange}\n              required\n            />\n          </div>\n\n          <button type=\"submit\" className=\"btn btn-primary\">\n            {editingId !== null ? 'Update' : 'Create'}\n          </button>\n          {editingId !== null && (\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary ms-2\"\n              onClick={() => {\n                setEditingId(null);\n                setForm({ vaccineName: '', date: '', doses: '', classes: '' });\n              }}\n            >\n              Cancel\n            </button>\n          )}\n        </form>\n      </div>\n\n      <div className=\"card mt-5 p-3\">\n        <h4>Upcoming Vaccination Drives</h4>\n        <table className=\"table table-bordered mt-3\">\n          <thead>\n            <tr>\n              <th>Vaccine</th>\n              <th>Date</th>\n              <th>Doses</th>\n              <th>Classes</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {drives.map((drive) => {\n              const isDriveEditable = isEditable(drive.date);\n              return (\n                <tr key={drive.id}>\n                  <td>{drive.vaccine}</td>\n                  <td>{new Date(drive.date).toLocaleDateString()}</td>\n                  <td>{drive.doses}</td>\n                  <td>{drive.classes}</td>\n                  <td>\n                    <button\n                      className=\"btn btn-sm btn-warning me-2\"\n                      onClick={() => handleEdit(drive)}\n                      disabled={!enableChanges && !isDriveEditable}\n                    >\n                      Edit\n                    </button>\n                    <button\n                      className=\"btn btn-sm btn-danger\"\n                      onClick={() => handleDelete(drive.id)}\n                    >\n                      Delete\n                    </button>\n                  </td>\n                </tr>\n              );\n            })}\n            {drives.length === 0 && (\n              <tr>\n                <td colSpan=\"5\" className=\"text-center\">\n                  No drives found\n                </td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default ManageVaccinations;\n\n\n*/\n/*\nimport React, { useEffect, useState } from 'react';\n\nconst ManageVaccinations = () => {\n  const [form, setForm] = useState({\n    vaccineName: '',\n    date: '',\n    doses: '',\n    classes: '',\n  });\n\n  const [drives, setDrives] = useState([]);\n  const [editingId, setEditingId] = useState(null);\n\n  useEffect(() => {\n    fetchDrives();\n  }, []);\n\n  const fetchDrives = async () => {\n    const token = localStorage.getItem('token');\n    try {\n      const res = await fetch('http://localhost:5000/vaccination-drives', {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      const data = await res.json();\n      setDrives(data);\n    } catch (err) {\n      console.error('Failed to fetch drives:', err);\n    }\n  };\n\n  const handleChange = (e) => {\n    setForm({ ...form, [e.target.name]: e.target.value });\n  };\n\n  const handleCreateOrUpdate = async (e) => {\n    e.preventDefault();\n    const token = localStorage.getItem('token');\n\n    const selectedDate = new Date(form.date);\n    const today = new Date();\n    const minAllowedDate = new Date();\n    minAllowedDate.setDate(today.getDate() + 15);\n\n    const originalDrive = drives.find((d) => d.id === editingId);\n    const isDateChanged = editingId !== null && originalDrive && originalDrive.date !== form.date;\n    const isCreating = editingId === null;\n\n    if ((isCreating || isDateChanged) && selectedDate < minAllowedDate) {\n      alert('Vaccination drive date must be at least 15 days from today.');\n      return;\n    }\n\n    const payload = {\n      vaccine: form.vaccineName,\n      date: form.date,\n      doses: parseInt(form.doses),\n      classes: form.classes,\n    };\n\n    try {\n      let url = 'http://localhost:5000/vaccination-drives';\n      let method = 'POST';\n\n      if (editingId !== null) {\n        url += `/${editingId}`;\n        method = 'PUT';\n      }\n\n      const res = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(payload),\n      });\n\n      const data = await res.json();\n      console.log(data.message);\n\n      setForm({ vaccineName: '', date: '', doses: '', classes: '' });\n      setEditingId(null);\n      fetchDrives();\n    } catch (err) {\n      console.error('Error saving drive:', err);\n    }\n  };\n\n  const handleEdit = (drive) => {\n    setForm({\n      vaccineName: drive.vaccine,\n      date: drive.date,\n      doses: drive.doses,\n      classes: drive.classes,\n    });\n    setEditingId(drive.id);\n  };\n\n  const handleDelete = async (id) => {\n    if (!window.confirm('Are you sure you want to delete this drive?')) return;\n\n    const token = localStorage.getItem('token');\n    try {\n      await fetch(`http://localhost:5000/vaccination-drives/${id}`, {\n        method: 'DELETE',\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      fetchDrives();\n    } catch (err) {\n      console.error('Error deleting drive:', err);\n    }\n  };\n\n  const isDateWithin15Days = (date) => {\n    const driveDate = new Date(date);\n    const today = new Date();\n    const threshold = new Date();\n    threshold.setDate(today.getDate() + 15);\n    return driveDate < threshold;\n  };\n\n  return (\n    <div className=\"container mt-4\">\n      <h2>Vaccination Drive Management</h2>\n\n      <div className=\"card p-3 mt-4\">\n        <h4>{editingId !== null ? 'Edit Drive' : 'Create Vaccination Drive'}</h4>\n        <form onSubmit={handleCreateOrUpdate}>\n          <div className=\"mb-3\">\n            <label className=\"form-label\">Vaccine Name</label>\n            <input\n              type=\"text\"\n              name=\"vaccineName\"\n              className=\"form-control\"\n              value={form.vaccineName}\n              onChange={handleChange}\n              required\n            />\n          </div>\n\n          <div className=\"mb-3\">\n            <label className=\"form-label\">Date of Drive</label>\n            <input\n              type=\"date\"\n              name=\"date\"\n              className=\"form-control\"\n              value={form.date}\n              onChange={handleChange}\n              required\n            />\n          </div>\n\n          <div className=\"mb-3\">\n            <label className=\"form-label\">Number of Available Doses</label>\n            <input\n              type=\"number\"\n              name=\"doses\"\n              className=\"form-control\"\n              value={form.doses}\n              onChange={handleChange}\n              required\n            />\n          </div>\n\n          <div className=\"mb-3\">\n            <label className=\"form-label\">Applicable Classes</label>\n            <input\n              type=\"text\"\n              name=\"classes\"\n              className=\"form-control\"\n              value={form.classes}\n              onChange={handleChange}\n              required\n            />\n          </div>\n\n          <button type=\"submit\" className=\"btn btn-primary\">\n            {editingId !== null ? 'Update' : 'Create'}\n          </button>\n          {editingId !== null && (\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary ms-2\"\n              onClick={() => {\n                setEditingId(null);\n                setForm({ vaccineName: '', date: '', doses: '', classes: '' });\n              }}\n            >\n              Cancel\n            </button>\n          )}\n        </form>\n      </div>\n\n      <div className=\"card mt-5 p-3\">\n        <h4>Upcoming Vaccination Drives</h4>\n        <table className=\"table table-bordered mt-3\">\n          <thead>\n            <tr>\n              <th>Vaccine</th>\n              <th>Date</th>\n              <th>Doses</th>\n              <th>Classes</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {drives.map((drive) => {\n              const isTooClose = isDateWithin15Days(drive.date);\n              return (\n                <tr key={drive.id}>\n                  <td>{drive.vaccine}</td>\n                  <td>{new Date(drive.date).toLocaleDateString()}</td>\n                  <td>{drive.doses}</td>\n                  <td>{drive.classes}</td>\n                  <td>\n                    <button\n                      className=\"btn btn-sm btn-warning me-2\"\n                      onClick={() => handleEdit(drive)}\n                      disabled={isTooClose}\n                      title={isTooClose ? \"Cannot edit a drive scheduled in less than 15 days\" : \"Edit\"}\n                    >\n                      Edit\n                    </button>\n                    <button className=\"btn btn-sm btn-danger\" onClick={() => handleDelete(drive.id)}>\n                      Delete\n                    </button>\n                  </td>\n                </tr>\n              );\n            })}\n            {drives.length === 0 && (\n              <tr>\n                <td colSpan=\"5\" className=\"text-center\">No drives found</td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default ManageVaccinations;\n\n*/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}